Libraries and their purpose
- @testing-library/react
  - uses ReactDOM to render a component for testing
- @testing-library/user-event
  - Helps simulate user input like typing and clicking
- @testing-library/ReactDOM
  - Helps find elements that are rendered by our components
- Jest
  - Runs our tests, reports results.
  - It's responsible for collection all of our test files and executing them.
  - Jest finds all files in the src folder that ends with .spec.js, .test.js or files placed in a __test__ folder.
- jsdom
  - Simulates a browser when running in a Node environment.

What happens when we run our tests?
- whenever we run our tests, they are being executed in a nodejs environment.
- whenever we render our component by using our render() a fake browser environment is created by a library called JSDOM.
- our component is render, html is taken from it and used by the fake browser environment.
- after we've used render we can access elements in this environmentusing the "screen object"

What is the word "Role" in testing referring to. (ARIA ROLES)
- it refers to a aria "Role" aka the purpose of an HTML elements.
- traditionally used by screen readers - softwares to help people understand the content on the screen.
- many HTML element have a "implicit" or automatically assigned role.
- elements can be assigned manually a role. Even trained engineers do this incorrectly.

Elements and their ARIA ROLES
- Role selection is the primary way REACT testing library wants you use to find elements
- "heading" - H1, H2, H3, H4, H5, H6
- "list" - ul, li
- "button" - button
- "link" - a
- "textbox" input
- if you are not able to find te correct amount/elements using role, you can use these 2 escape hatch methods
  - data-testid
  - container.querySelector

data-testid
- HTML = <div data-testid="users"></div>
- within(screen.getTestId("users")).getAllByRole("row"); // get the element and inside of that get me all the elements with a role of row
- requires use to modify the html/template/component

container.querySelector
- You won't need to modify the html/template/component
- You'll need to get access to the container - const {container} = render(<UserList users={users} />);
- The container is added to the template when you run a test. As a wrapper div
- We can then us this container to query the DOM - const rows = container.querySelectorAll("tbody tr");

Different types of Matches
- Jest example matches - normally for general purpose things, can be really used on any JS code
  - expect(["a", "b"]).toHaveLength(2) - Makes sure the value is an array with a particular length.
  - expect(5).toEqual(5) - Makes sure the value equals another value.
  - expect(["a", "b", "x"]).toContain("b") - Makes sure an array contains a value, or make sure a string contains another string.
  - expect(fn).toThrow(2) - Makes sure functions throws an error when called.
  - expect(mock).toHaveBeenCalled() - Makes sure a mock function has been called.
- React Testing library
  - expect(element).toBeInDocument() - Makes sure an element is present on the page.
  - expect(element).toBeEnabled() - Makes sure an element (like an input) is not disabled.
  - expect(element).toHaveClass() - Makes sure an element has a class name.
  - expect(element).toHaveTextContent() - Makes sure an element has some particular text.
  - expect(element).toHaveValue() - Makes sure an input, select or textarea has a value.
  
Mock functions
- mocks as in not a real function.
- it records whenever it gets called, and the arguments it was called with. (like internal storage)
- used very often when we need to make sure a component calls a callback

Using screen.logTestingPlaygroundURL()
- To get help with finding a particular element, use this helper function.
- Takes the HTML currently rendered by your component and created a link to view that html in the "testing playground" tool.
- Testing playground helps us write queries (function to find elements.)

BeforeEach 
- This is a global method inside of JEST.
- When using a before each in your test file, it will first run the before each method before running any of your tests.
- Youcan also just create your own function and call it in your tests. (on top)

Using RTL-Book
- Close with CTRL + C
- Open with npx rtl-book serve roles-notes.js

Using ACT
- The act function defines a window in time where state updates can (and should) occur.
- React will process all state updates + useEffects before exiting ACT.
- This gives us some time to get the data back before moving on and having async tests fail.
- React Testing Library uses "act" behind the scenes for you.
- To solve act warnings, you should use a "findBy". Usually you don't want to follow the advice of the warning.
- These call "act" automatically for you. (This is the preffered way of using "act" when using RTL - React testing library)
  - screen.findBy - findBy are async in nature, gives us 1 second to get data
  - screen.findByAll - findBy are async in nature, gives us 1 second to get data
  - waitFor
  - user.keyboard - Synchronous
  - user.click - Synchronous

Options to solve act warnings (from best to worst)
- Use a "findBy" || "findByAll" to detect when the component has finished its data fetching.
- Use an "act" to control when the data-fetching request gets resolved.
- Use a module mock to avoid rendering the troublesome component. (see test file for an example)
  - we can use it to pretend to be content of some other file - aka "Don't ever import the file was added as a mock, if anyone tried to import that item, use our mock instead."
- use an "act" with a pause. (please avoid this)

SWR
- Behind the scenes SWR is still using the AXIOS behind the scenes to make a request.
- you can think of it as a combination of useEfect and useState.
- it's only going to attempt to fetch the data one single time and send the cache version next time. (it has it's own cache)

Data fetching in tests
- We don't want our components to make actual network requests
- Slow data might change!
- We fake (or mock) daa fetching in tests
- Options for data fetching
  - #1 - Mock the file that contains the data fetching code - (easiest but doesn't actually test the component)
  - #2 - Use a library to "mock" axios/fetch - get axios to return fake data (we an use MSW Library - Mock service worker)
    - MSW Library - when making a request the MSW Library is going to intercept that request and instead of allowing it to continue, it will immediately return some mock data back.
  - #3 - Create a manual mock for axios

Before All, After Each, After All
- These are built into the jest test runner and run automatically.
- beforeAll() - will be executed one time before all the tests inside of this file. (can start listening to server requests here for example)
- afterEach() - will run after each individual test inside of the file has run. (can reset the server with this for an example)
- afterAll() - will run after all tests in this file has executed. (we can stop our server here for an example)
- see HomeRoute.test.js for an example.

The DESCRIBE function
- allows us to nest tests
- allows us to mark a block of tests with a overall message of what they all do
- it scopes the Before All, After Each, After All functions meaning they will only apply to the tests inside of the describe if it is used there.
- if you want Before All, After Each, After All to apply to the entire document, you will need to add it outside of this describe block.
- allows us to change the order of execution to what we want it to do and where we want it to happen.
- it also formats the tests in the report inside of the terminal.
- adding describe.only to describe allows us to only run tests in that block for limiting test execution.